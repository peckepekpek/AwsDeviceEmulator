/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package awsensors.emulator.device.a20;

import awsensors.emulator.device.a20.A20Device;
import awsensors.emulator.device.a20.ioserver.A20IOServer;
import awsensors.emulator.device.a20.ioserver.ServerListener;
import awsensors.emulator.device.a20.ioserver.StateChangeListener;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author farnauvi
 */
public class DeviceA20Frame extends javax.swing.JFrame implements ServerListener,StateChangeListener{
    A20Device device = null;
    /**
     * Creates new form DeviceFrame
     */
    public DeviceA20Frame() {
        initComponents();
        startModule();
    }
    
    public void startModule() {
        try {
            this.ip_label.setText(InetAddress.getLocalHost().getHostAddress());
            DefaultCaret caret = (DefaultCaret)controlreceivedFromAWSuite.getCaret();
            caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
            DefaultCaret caret1 = (DefaultCaret)controlsendedtoAWSuite.getCaret();
            caret1.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
            DefaultCaret caret2 = (DefaultCaret)dataSendedtoAWSuite.getCaret();
            caret2.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
            
        } catch (UnknownHostException ex) {
            Logger.getLogger(DeviceA20Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startDevice = new javax.swing.JButton();
        ControlReceivedAWSuite = new javax.swing.JScrollPane();
        controlreceivedFromAWSuite = new javax.swing.JTextArea();
        ControlSendedtoAWSuite = new javax.swing.JScrollPane();
        controlsendedtoAWSuite = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataSendedtoAWSuite = new javax.swing.JTextArea();
        received = new javax.swing.JLabel();
        sended = new javax.swing.JLabel();
        state = new javax.swing.JLabel();
        chooseModel = new javax.swing.JLabel();
        aws_models = new javax.swing.JComboBox<>();
        your_ip_address = new javax.swing.JLabel();
        ip_label = new javax.swing.JLabel();
        sended1 = new javax.swing.JLabel();
        DeviceState = new javax.swing.JLabel();
        stopDevice = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Device Emulator");

        startDevice.setText("Start Device");
        startDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startDeviceActionPerformed(evt);
            }
        });

        controlreceivedFromAWSuite.setColumns(20);
        controlreceivedFromAWSuite.setRows(5);
        ControlReceivedAWSuite.setViewportView(controlreceivedFromAWSuite);

        controlsendedtoAWSuite.setColumns(20);
        controlsendedtoAWSuite.setRows(5);
        ControlSendedtoAWSuite.setViewportView(controlsendedtoAWSuite);

        dataSendedtoAWSuite.setColumns(20);
        dataSendedtoAWSuite.setRows(5);
        jScrollPane1.setViewportView(dataSendedtoAWSuite);

        received.setText("Control Received from AWSuite");
        received.setToolTipText("");

        sended.setText("Sent to AWSuite");

        state.setText("Status");
        state.setToolTipText("");

        chooseModel.setText("Choose Model");

        aws_models.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A20 AWS device" }));
        aws_models.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aws_modelsActionPerformed(evt);
            }
        });

        your_ip_address.setText("Your IP Addess:");

        ip_label.setFont(new java.awt.Font("Consolas", 2, 12)); // NOI18N
        ip_label.setText("IP Address");
        ip_label.setToolTipText("");
        ip_label.setName("ip_local"); // NOI18N

        sended1.setText("Data Sent to AWSuite");

        DeviceState.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        DeviceState.setText("DeviceState");
        DeviceState.setToolTipText("");

        stopDevice.setText("Stop Device");
        stopDevice.setToolTipText("");
        stopDevice.setEnabled(false);
        stopDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopDeviceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ControlSendedtoAWSuite, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
                            .addComponent(ControlReceivedAWSuite, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(chooseModel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(aws_models, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(startDevice))
                                    .addComponent(received))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stopDevice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(your_ip_address)
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(ip_label)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(state))
                                    .addComponent(DeviceState, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(8, 8, 8)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sended)
                            .addComponent(sended1))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(aws_models, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chooseModel)
                            .addComponent(startDevice)
                            .addComponent(stopDevice)
                            .addComponent(your_ip_address)
                            .addComponent(ip_label))
                        .addGap(8, 8, 8)
                        .addComponent(received))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(state)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeviceState, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ControlReceivedAWSuite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sended)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ControlSendedtoAWSuite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sended1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startDeviceActionPerformed
        device = new A20Device();
        device.addServerListener(this);
        device.addStateChangeListener(this);
        state.setIcon(new javax.swing.ImageIcon(getClass().getResource("/awsensors/emulator/resources/green_bole.png")));
        state.setText("Device running");
        this.startDevice.setEnabled(false);
        this.stopDevice.setEnabled(true);
    }//GEN-LAST:event_startDeviceActionPerformed

    private void aws_modelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aws_modelsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aws_modelsActionPerformed

    private void stopDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopDeviceActionPerformed
        // TODO add your handling code here:device = new A20Device();
        state.setIcon(new javax.swing.ImageIcon(getClass().getResource("/awsensors/emulator/resources/red_bole.png")));
        state.setText("Device stopped");
        device.ControlServer.portActive=false;
        device.DataServer.portActive=false;
        this.device.ControlServer.done();
        this.device.DataServer.done();
        this.startDevice.setEnabled(true);
        this.stopDevice.setEnabled(false);
    }//GEN-LAST:event_stopDeviceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeviceA20Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeviceA20Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeviceA20Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeviceA20Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeviceA20Frame().setVisible(true);
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ControlReceivedAWSuite;
    private javax.swing.JScrollPane ControlSendedtoAWSuite;
    private javax.swing.JLabel DeviceState;
    private javax.swing.JComboBox<String> aws_models;
    private javax.swing.JLabel chooseModel;
    private javax.swing.JTextArea controlreceivedFromAWSuite;
    private javax.swing.JTextArea controlsendedtoAWSuite;
    private javax.swing.JTextArea dataSendedtoAWSuite;
    private javax.swing.JLabel ip_label;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel received;
    private javax.swing.JLabel sended;
    private javax.swing.JLabel sended1;
    private javax.swing.JButton startDevice;
    private javax.swing.JLabel state;
    private javax.swing.JButton stopDevice;
    private javax.swing.JLabel your_ip_address;
    // End of variables declaration//GEN-END:variables

    @Override
    public void PaqueteControlRecibido(String texto) {
        this.controlreceivedFromAWSuite.append(texto+"\r\n");
    }
    
     @Override
    public void PaqueteControlEnviado(String texto) {
          this.controlsendedtoAWSuite.append(texto+"\r\n");
    }

    @Override
    public void PaqueteDatosEnviado(String texto) {
        this.dataSendedtoAWSuite.append(texto+"\r\n");
    }

    @Override
    public void PaqueteDatosRecibido(String texto) {
        this.dataSendedtoAWSuite.append(texto+"\r\n");
    }

    @Override
    public void CambioEstadoProducido(String estado) {
        DeviceState.setText(estado);
    }

    @Override
    public void AlertaHilo(String tipo) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

  
}
